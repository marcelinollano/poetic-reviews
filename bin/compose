#!/usr/bin/env ruby
require 'rubygems'
require 'bundler'
require 'set'
Bundler.require
Dotenv.load

# Options
name              = 'Puerta del sol' # name of the place
type              = 'assonance'      # consonance | assonance
syllables_count   = 7                # syllables per line
stanzas_size      = 4                # lines per stanza
sentiment_score   = -1...1           # -1 | 1
sentiment_order   = 'downer'          # upper | downer

# Loads the database
require "#{Dir.pwd}/lib/models.rb"

# Syllables distribution
puts "Syllables"
puts
thing     = Thing.where(:name => name).first
items     = Sentence.where(:thing_id => thing.id)
                    .where(:sentiment_score => sentiment_score)
                    .group_and_count(:syllables_count)
                    .order(Sequel.desc(:count)).all
items.each do |item|
  printf "%-5s", item[:syllables_count].to_s
  item[:count].times do |i|
    printf "="
  end
  puts
end
puts
puts "-------------------------------------------------------------------------------------------------------"
puts

# Get me all those sweet rhymes
thing  = Thing.where(:name => name).first
rhymes = Sentence.where(:thing_id => thing.id)
                 .where(:syllables_count => syllables_count)
                 .where(:sentiment_score => sentiment_score)
                 .group_and_count(:"rhyme_#{type}")

puts "Stanzas"
puts

rhymes.all.each do |rhyme|
  # The emotional roller coaster
  order = case sentiment_order
  when 'upper'
    Sequel.asc(:sentiment_score)
  when 'downer'
    Sequel.desc(:sentiment_score)
  end

  # Give me all with this particular rhyme
  sentences = Sentence.where(:thing_id => thing.id)
                      .where(:syllables_count => syllables_count)
                      .where(:sentiment_score => sentiment_score)
                      .where(:"rhyme_#{type}" => rhyme[:"rhyme_#{type}"])
                      .order(order)
                      .all

  # Checks for last word duplicates
  words_last = Set.new
  lines      = Array.new
  sentences.each do |sentence|
    unless words_last.include?(sentence[:words_last])
      lines << sentence
    end
    words_last << sentence.words_last
  end

  # Print stanzas by size
  if lines.size == stanzas_size
    puts rhyme[:"rhyme_#{type}"]
    puts
    lines.each do |line|
          printf "%-50s %-40s %5s %5s\n",
                 line.text,
                 Review.first(:id => line.review_id).author,
                 line.sentiment_score.round(2),
                 line.sentiment_magnitude.round(2)
    end
    puts
  end
end
